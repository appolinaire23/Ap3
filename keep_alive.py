import asyncio
import aiohttp
import time
from datetime import datetime
import logging
from telethon import TelegramClient
import os

logger = logging.getLogger(__name__)

class KeepAliveSystem:
    """Syst√®me de maintien d'activit√© pour Replit"""

    def __init__(self, bot_client, admin_id):
        self.bot_client = bot_client
        self.admin_id = admin_id
        self.last_bot_activity = time.time()
        self.last_server_activity = time.time()
        self.check_interval = 60  # 1 minute (plus fr√©quent)
        self.timeout_threshold = 120  # 2 minutes (plus sensible)
        self.server_url = os.getenv('REPLIT_URL', 'http://localhost:5000')  # URL automatique Replit
        self.is_running = False
        self.continuous_mode = False  # Mode normal par d√©faut - r√©veil seulement si inactif
        self.message_count = 0
        self.wake_up_active = False  # Indique si une s√©quence de r√©veil est en cours

    async def start_keep_alive(self):
        """D√©marrer le syst√®me de maintien d'activit√©"""
        if self.is_running:
            return

        self.is_running = True
        logger.info("üîÑ Syst√®me de maintien d'activit√© d√©marr√©")

        # D√©marrer les t√¢ches en parall√®le
        await asyncio.gather(
            self.monitor_bot_activity(),
            self.monitor_server_activity(),
            self.periodic_health_check()
        )

    async def monitor_bot_activity(self):
        """Surveiller l'activit√© du bot - r√©veil SEULEMENT si vraiment inactif"""
        while self.is_running:
            try:
                current_time = time.time()
                inactivity_duration = current_time - self.last_bot_activity

                if self.continuous_mode:
                    # Mode continu forc√© : envoyer des messages r√©guli√®rement
                    await self.send_continuous_messages()
                else:
                    # V√©rifier si le bot est VRAIMENT inactif ET le syst√®me n'est pas d√©j√† en mode r√©veil
                    if inactivity_duration > self.timeout_threshold and not self.wake_up_active:
                        logger.info(f"üö® BOT VRAIMENT INACTIF d√©tect√© ({inactivity_duration:.0f}s) - Activation du r√©veil")
                        self.wake_up_active = True
                        self.message_count = 0
                        # D√©marrer UNE SEULE s√©quence de r√©veil
                        await self.wake_up_bot()
                    elif inactivity_duration <= self.timeout_threshold and self.wake_up_active:
                        # Bot redevenu actif - arr√™ter le r√©veil automatiquement
                        logger.info("‚úÖ Activit√© bot d√©tect√©e - Arr√™t automatique du r√©veil")
                        self.wake_up_active = False
                        self.message_count = 0

                # Surveillance normale - pas de messages continus
                await asyncio.sleep(60)

            except Exception as e:
                logger.error(f"Erreur dans monitor_bot_activity: {e}")
                await asyncio.sleep(30)

    async def monitor_server_activity(self):
        """Surveiller l'activit√© du serveur - r√©veil SEULEMENT si vraiment inactif"""
        while self.is_running:
            try:
                current_time = time.time()
                inactivity_duration = current_time - self.last_server_activity

                if self.continuous_mode:
                    # Mode continu forc√©
                    await self.wake_up_server()
                else:
                    # V√©rifier si le serveur est VRAIMENT inactif ET pas d√©j√† en mode r√©veil
                    if inactivity_duration > self.timeout_threshold and not self.wake_up_active:
                        # Tester si le serveur r√©pond avant de le consid√©rer comme inactif
                        server_responsive = await self.test_server_connectivity()
                        
                        if not server_responsive:
                            logger.info(f"üö® SERVEUR VRAIMENT INACTIF d√©tect√© ({inactivity_duration:.0f}s) - Activation du r√©veil")
                            self.wake_up_active = True
                            self.message_count = 0
                            # UNE SEULE tentative de r√©veil
                            await self.wake_up_server()
                        else:
                            # Serveur r√©pond - mise √† jour silencieuse
                            self.last_server_activity = current_time
                            logger.info("‚úÖ Serveur r√©pond - Activit√© mise √† jour")
                    elif inactivity_duration <= self.timeout_threshold and self.wake_up_active:
                        # Serveur redevenu actif - arr√™ter le r√©veil
                        logger.info("‚úÖ Activit√© serveur d√©tect√©e - Arr√™t automatique du r√©veil")
                        self.wake_up_active = False
                        self.message_count = 0

                # Surveillance normale - pas de r√©veil continu
                await asyncio.sleep(60)

            except Exception as e:
                logger.error(f"Erreur dans monitor_server_activity: {e}")
                await asyncio.sleep(30)

    async def wake_up_bot(self):
        """R√©veiller le bot via message du serveur"""
        try:
            # D√©clencher un message depuis le serveur Replit
            await self.trigger_server_message_to_bot()
            logger.info("üì® Message de r√©veil d√©clench√© depuis le SERVEUR REPLIT")

            # Ping silencieux - pas de r√©ponse visible
            await asyncio.sleep(1)

            self.last_bot_activity = time.time()
            logger.info("ü§ñ Bot r√©veill√© par le SERVEUR REPLIT")

        except Exception as e:
            logger.error(f"Erreur lors du r√©veil du bot: {e}")

    async def wake_up_server(self):
        """R√©veiller le serveur Replit via requ√™te HTTP"""
        try:
            # Ping silencieux - pas de message visible
            logger.info("üîÑ Ping silencieux du serveur (pas de message visible)")

            # Faire une requ√™te HTTP pour que le serveur r√©ponde
            await self.make_server_request_with_response()

            self.last_server_activity = time.time()
            logger.info("üñ•Ô∏è Serveur r√©veill√© et a r√©pondu")

        except Exception as e:
            logger.error(f"Erreur lors du r√©veil du serveur: {e}")

    async def trigger_server_message_to_bot(self):
        """D√©clencher un message du serveur vers le bot"""
        try:
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.post(
                        f"{self.server_url}/send-message",
                        json={
                            "admin_id": self.admin_id,
                            "message": "üîî Replit: Kouam√© r√©veil toi",
                            "bot_token": os.getenv("BOT_TOKEN")
                        },
                        timeout=aiohttp.ClientTimeout(total=10)
                    ) as response:
                        if response.status == 200:
                            logger.info("üåê Serveur Replit a envoy√© le message de r√©veil")
                        else:
                            logger.warning(f"√âchec message r√©veil serveur: {response.status}")
                except Exception as e:
                    logger.debug(f"Erreur message r√©veil serveur: {e}")
        except:
            pass

    async def make_server_request_with_response(self):
        """Faire une requ√™te au serveur pour qu'il r√©ponde"""
        try:
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.post(
                        f"{self.server_url}/send-message",
                        json={
                            "admin_id": self.admin_id,
                            "message": "‚úÖ Replit: D'accord Kouam√©",
                            "bot_token": os.getenv("BOT_TOKEN")
                        },
                        timeout=aiohttp.ClientTimeout(total=10)
                    ) as response:
                        if response.status == 200:
                            logger.info("üåê Serveur Replit a r√©pondu avec succ√®s")
                        else:
                            logger.warning(f"√âchec r√©ponse serveur: {response.status}")
                except Exception as e:
                    logger.debug(f"Erreur r√©ponse serveur: {e}")
        except:
            pass

    async def send_continuous_messages(self):
        """Envoyer des messages continus SEULEMENT en mode forc√©"""
        try:
            # SEULEMENT si mode continu forc√© explicitement activ√©
            if not self.continuous_mode:
                return
                
            self.message_count += 1

            # Messages plus agressifs pour forcer le r√©veil
            if self.message_count % 2 == 1:
                # Bot vers Serveur - Messages plus insistants
                await self.bot_client.send_message(
                    self.admin_id,
                    f"üö® Bot: REPLIT R√âVEIL-TOI MAINTENANT ! (For√ßage #{self.message_count})"
                )
                logger.info(f"üö® Message FORC√â #{self.message_count} envoy√© au serveur")

                # Faire plusieurs requ√™tes HTTP pour forcer le r√©veil
                await self.make_server_request()
                await asyncio.sleep(1)
                await self.make_server_request()

                # R√©ponse simul√©e du serveur
                await asyncio.sleep(2)
                await self.bot_client.send_message(
                    self.admin_id,
                    f"üí™ Replit: OUI KOUAM√â, JE RESTE √âVEILL√â ! #{self.message_count}"
                )
            else:
                # Serveur vers Bot - Messages insistants
                await self.bot_client.send_message(
                    self.admin_id,
                    f"üî• Replit: KOUAM√â RESTE CONNECT√â ! (For√ßage #{self.message_count})"
                )
                logger.info(f"üî• Message FORC√â #{self.message_count} envoy√© au bot")

                # R√©ponse du bot
                await asyncio.sleep(2)
                await self.bot_client.send_message(
                    self.admin_id,
                    f"‚ö° Bot: TOUJOURS L√Ä REPLIT ! #{self.message_count}"
                )

            # Forcer la mise √† jour des activit√©s
            self.last_bot_activity = time.time()
            self.last_server_activity = time.time()

            # Log du for√ßage
            logger.info(f"üî• FOR√áAGE CONTINU ACTIF - Message #{self.message_count}")

        except Exception as e:
            logger.error(f"Erreur lors des messages continus: {e}")
            # M√™me en cas d'erreur, continuer le for√ßage
            self.last_bot_activity = time.time()
            self.last_server_activity = time.time()

    async def test_server_connectivity(self):
        """Tester si le serveur r√©pond (sans le r√©veiller)"""
        try:
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(
                        f"{self.server_url}/ping",
                        timeout=aiohttp.ClientTimeout(total=3)
                    ) as response:
                        if response.status == 200:
                            return True
                except:
                    return False
        except:
            return False
        return False

    async def make_server_request(self):
        """Faire une requ√™te au serveur"""
        try:
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(
                        f"{self.server_url}/wake-up",
                        timeout=aiohttp.ClientTimeout(total=5)
                    ) as response:
                        if response.status == 200:
                            logger.info("üåê Serveur contact√© avec succ√®s")
                            self.last_server_activity = time.time()
                except:
                    pass  # Ignorer les erreurs de connexion
        except:
            pass

    async def periodic_health_check(self):
        """V√©rification p√©riodique de sant√© - surveillance intelligente"""
        while self.is_running:
            try:
                current_time = time.time()
                
                # V√©rification silencieuse - pas de messages de r√©veil inutiles
                bot_inactive = (current_time - self.last_bot_activity) > self.timeout_threshold
                server_inactive = (current_time - self.last_server_activity) > self.timeout_threshold
                
                if not bot_inactive and not server_inactive and not self.continuous_mode:
                    # Tout va bien - surveillance normale
                    await self.ping_bot_silent()
                    await self.ping_server_silent()
                    await asyncio.sleep(120)  # V√©rification toutes les 2 minutes
                elif self.wake_up_active or self.continuous_mode:
                    # Mode r√©veil actif - surveillance acc√©l√©r√©e
                    await self.ping_bot_silent()
                    await self.ping_server_silent()
                    await asyncio.sleep(30)  # V√©rification toutes les 30 secondes
                else:
                    # Inactivit√© d√©tect√©e mais pas encore en mode r√©veil
                    await self.ping_bot_silent()
                    await self.ping_server_silent()
                    await asyncio.sleep(60)  # V√©rification chaque minute

            except Exception as e:
                logger.error(f"Erreur dans periodic_health_check: {e}")
                await asyncio.sleep(30)

    async def ping_bot(self):
        """Ping silencieux pour maintenir l'activit√© du bot"""
        try:
            # Mettre √† jour l'activit√© du bot
            self.last_bot_activity = time.time()

            # Log d'activit√©
            logger.info(f"ü§ñ Bot ping - {datetime.now().strftime('%H:%M:%S')}")

        except Exception as e:
            logger.error(f"Erreur ping bot: {e}")

    async def ping_bot_silent(self):
        """Ping silencieux du bot - mise √† jour d'activit√© seulement"""
        try:
            # Mise √† jour silencieuse de l'activit√© sans log
            self.last_bot_activity = time.time()
        except Exception as e:
            logger.error(f"Erreur ping bot silencieux: {e}")

    async def ping_server_silent(self):
        """Ping silencieux du serveur - test de connectivit√© sans log"""
        try:
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(
                        f"{self.server_url}/ping",
                        timeout=aiohttp.ClientTimeout(total=3)
                    ) as response:
                        if response.status == 200:
                            self.last_server_activity = time.time()
                except:
                    pass  # Silence - pas de log d'erreur pour les pings
        except:
            pass

    async def ping_server(self):
        """Ping serveur avec log"""
        try:
            # Faire une requ√™te HTTP l√©g√®re
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get(
                        f"{self.server_url}/ping",
                        timeout=aiohttp.ClientTimeout(total=5)
                    ) as response:
                        if response.status == 200:
                            self.last_server_activity = time.time()
                            logger.info(f"üåê Serveur ping - {datetime.now().strftime('%H:%M:%S')}")
                        else:
                            logger.warning(f"Ping serveur failed: {response.status}")
                except asyncio.TimeoutError:
                    logger.warning("Timeout ping serveur")
                except Exception as e:
                    logger.debug(f"Erreur ping serveur: {e}")

        except Exception as e:
            logger.error(f"Erreur ping serveur: {e}")

    def update_bot_activity(self):
        """Mettre √† jour l'activit√© du bot (√† appeler lors des commandes)"""
        self.last_bot_activity = time.time()

    def update_server_activity(self):
        """Mettre √† jour l'activit√© du serveur (√† appeler lors des requ√™tes HTTP)"""
        self.last_server_activity = time.time()

    def stop_continuous_mode(self):
        """Arr√™ter le mode continu et la s√©quence de r√©veil"""
        self.continuous_mode = False
        self.wake_up_active = False
        self.message_count = 0
        logger.info("‚è∏Ô∏è FOR√áAGE ARR√äT√â - Mode surveillance activ√©")
        return "‚è∏Ô∏è **FOR√áAGE DE R√âVEIL ARR√äT√â**\n\n‚úÖ Le syst√®me revient en mode surveillance intelligent.\n\n**Nouveau fonctionnement :**\nüîç Surveillance active en permanence\n‚ö° D√®s qu'inactivit√© d√©tect√©e ‚Üí FOR√áAGE IMM√âDIAT\nüî• Messages continus FORC√âS jusqu'√† `/stop`\nüí™ Aucun arr√™t automatique - r√©veil persistant\n\n**Le syst√®me restera vigilant et forcera le r√©veil d√®s la moindre inactivit√© !**"

    def start_continuous_mode(self):
        """D√©marrer le mode continu"""
        self.continuous_mode = True
        self.wake_up_active = True
        self.message_count = 0
        logger.info("üî• Mode continu ULTRA-FORC√â activ√©")
        return "üî• **MODE CONTINU ULTRA-FORC√â ACTIV√â**\n\n‚ö° Messages de r√©veil FORC√âS en permanence\nüí™ Bot et serveur maintenus √©veill√©s de force\nüö® R√©veil agressif et persistant\nüîÑ √âchanges continus jusqu'√† `/stop`\n\n**Le syst√®me va maintenant FORCER le r√©veil en permanence !**"

    def stop_keep_alive(self):
        """Arr√™ter le syst√®me de maintien d'activit√©"""
        self.is_running = False
        logger.info("üî¥ Syst√®me de maintien d'activit√© arr√™t√©")

    def get_status(self):
        """Obtenir le statut du syst√®me"""
        current_time = time.time()
        return {
            "bot_last_activity": datetime.fromtimestamp(self.last_bot_activity).strftime("%Y-%m-%d %H:%M:%S"),
            "server_last_activity": datetime.fromtimestamp(self.last_server_activity).strftime("%Y-%m-%d %H:%M:%S"),
            "bot_inactive_duration": int(current_time - self.last_bot_activity),
            "server_inactive_duration": int(current_time - self.last_server_activity),
            "is_running": self.is_running,
            "continuous_mode": self.continuous_mode,
            "wake_up_active": self.wake_up_active,
            "message_count": self.message_count
        }